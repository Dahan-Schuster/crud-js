{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","IDB_VERSAO","IDB_NOME","OBJECT_STORES","connection","closeConnection","Promise","resolve","reject","openDBRequest","window","indexedDB","open","onupgradeneeded","configurarEstruturaDoBanco","onsuccess","e","novaConexao","onerror","console","log","target","error","IDBDatabase","result","forEach","objectStore","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","close","bind","Error"],"mappings":";;;;;;;;AAAA;;;AAGA,IAAMA,iBAAiB,GAAI,YAAM;AAEhC;;;;AAIA,MAAMC,UAAU,GAAG,CAAnB;AACA;;;;;AAIA,MAAMC,QAAQ,GAAG,eAAjB;AACA;;;;;AAIA,MAAMC,aAAa,GAAG,CAAC,aAAD,CAAtB;AAEA,MAAIC,UAAJ,EAAgBC,eAAhB;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEC;;;;;;AAFD,wCAQwB;AAEtB,iBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,gBAAIC,aAAa,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBV,QAAtB,EAAgCD,UAAhC,CAApB;AAEAQ,YAAAA,aAAa,CAACI,eAAd,GAAgCC,0BAAhC;;AACAL,YAAAA,aAAa,CAACM,SAAd,GAA0B,UAAAC,CAAC;AAAA,qBAAIT,OAAO,CAACH,UAAU,GAAGA,UAAH,GAAgBa,WAAW,CAACD,CAAD,CAAtC,CAAX;AAAA,aAA3B;;AACAP,YAAAA,aAAa,CAACS,OAAd,GAAwB,UAAAF,CAAC,EAAI;AAC5BG,cAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAC,CAACK,MAAF,CAASC,KAArB;AACAd,cAAAA,MAAM,CAAC,iDAAD,CAAN;AACA,aAHD;AAIA,WATM,CAAP;AAWA;;;;;;;;;;AASA,mBAASM,0BAAT,CAAoCE,CAApC,EAAuC;AACtC,gBAAIO,WAAW,GAAGP,CAAC,CAACK,MAAF,CAASG,MAA3B;AAEArB,YAAAA,aAAa,CAACsB,OAAd,CAAsB,UAAAC,WAAW,EAAI;AACpC,kBAAIH,WAAW,CAACI,gBAAZ,CAA6BC,QAA7B,CAAsCF,WAAtC,CAAJ,EAAwD;AACvDH,gBAAAA,WAAW,CAACM,iBAAZ,CAA8BH,WAA9B;AACA;;AACDH,cAAAA,WAAW,CAACO,iBAAZ,CAA8BJ,WAA9B,EAA2C;AAACK,gBAAAA,aAAa,EAAE;AAAhB,eAA3C;AACA,aALD;AAMA;AAED;;;;;;;;;AAOA,mBAASd,WAAT,CAAqBD,CAArB,EAAwB;AACvBZ,YAAAA,UAAU,GAAGY,CAAC,CAACK,MAAF,CAASG,MAAtB;AACAnB,YAAAA,eAAe,GAAGD,UAAU,CAAC4B,KAAX,CAAiBC,IAAjB,CAAsB7B,UAAtB,CAAlB;;AACAA,YAAAA,UAAU,CAAC4B,KAAX,GAAmB,YAAY;AAC9B,oBAAM,IAAIE,KAAJ,CAAU,6DAAV,CAAN;AACA,aAFD;;AAGA,mBAAO9B,UAAP;AACA;AAED;AAED;;;;;;AA3DD;AAAA;AAAA,2CAgE2B;AACzB,cAAIA,UAAJ,EAAgB;AACfC,YAAAA,eAAe;AACfD,YAAAA,UAAU,GAAG,IAAb;AACA;AACD;AArEF;;AAAA;AAAA;AAAA;AAwEA,CA5FyB,EAA1B","sourcesContent":["/**\n * Classe responsável por segurar e retornar uma conexão com o IndexedDB\n */\nconst ConnectionFactory = (() => {\n\t\n\t/**\n\t * Versão do banco de dados\n\t * @type {number}\n\t */\n\tconst IDB_VERSAO = 1\n\t/**\n\t * Nome do banco de dados\n\t * @type {string}\n\t */\n\tconst IDB_NOME = 'NegociacoesDb'\n\t/**\n\t * Object Stores (tabelas não relacionais) do banco de dados\n\t * @type {string[]}\n\t */\n\tconst OBJECT_STORES = ['negociacoes']\n\t\n\tlet connection, closeConnection\n\t\n\treturn class ConnectionFactory {\n\t\t\n\t\t/**\n\t\t * Abre uma nova conexão com o IndexedDB,\n\t\t * ou retorna uma já existente\n\t\t *\n\t\t * @returns {Promise}\n\t\t */\n\t\tstatic getConnection() {\n\t\t\t\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet openDBRequest = window.indexedDB.open(IDB_NOME, IDB_VERSAO)\n\t\t\t\t\n\t\t\t\topenDBRequest.onupgradeneeded = configurarEstruturaDoBanco\n\t\t\t\topenDBRequest.onsuccess = e => resolve(connection ? connection : novaConexao(e))\n\t\t\t\topenDBRequest.onerror = e => {\n\t\t\t\t\tconsole.log(e.target.error)\n\t\t\t\t\treject('Não foi possível se conectar ao banco de dados.')\n\t\t\t\t}\n\t\t\t})\n\t\t\t\n\t\t\t/**\n\t\t\t * TODO: backup do banco antes de realizar a atualização\n\t\t\t * 1) fazer backup dos dados da Obj Storage em uma clone\n\t\t\t * 2) Recriar a Obj Storage original\n\t\t\t * 3) Tentar popular a nova Obj Storage com os dados antigos\n\t\t\t * 4) Deletar a Obj Storage de backup em caso de sucesso\n\t\t\t * 5) Informar a falha em caso de erro e manter o backup\n\t\t\t * *) Usar o envento IDBDatabase.onversionchange\n\t\t\t */\n\t\t\tfunction configurarEstruturaDoBanco(e) {\n\t\t\t\tlet IDBDatabase = e.target.result\n\t\t\t\t\n\t\t\t\tOBJECT_STORES.forEach(objectStore => {\n\t\t\t\t\tif (IDBDatabase.objectStoreNames.contains(objectStore)) {\n\t\t\t\t\t\tIDBDatabase.deleteObjectStore(objectStore)\n\t\t\t\t\t}\n\t\t\t\t\tIDBDatabase.createObjectStore(objectStore, {autoIncrement: true})\n\t\t\t\t})\n\t\t\t}\n\t\t\t\n\t\t\t/**\n\t\t\t * Para uso interno do método\n\t\t\t * Abre uma nova conexão com o IndexedDB\n\t\t\t *\n\t\t\t * @param e\n\t\t\t * @returns {IDBDatabase}\n\t\t\t */\n\t\t\tfunction novaConexao(e) {\n\t\t\t\tconnection = e.target.result\n\t\t\t\tcloseConnection = connection.close.bind(connection)\n\t\t\t\tconnection.close = function () {\n\t\t\t\t\tthrow new Error('A conexão é compartilhada e, portanto, não deve ser fechada')\n\t\t\t\t}\n\t\t\t\treturn connection\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t/**\n\t\t * Método privado que sobrepõe o método IDBDatabase.close\n\t\t *\n\t\t * @private\n\t\t */\n\t\tstatic _closeConnection() {\n\t\t\tif (connection) {\n\t\t\t\tcloseConnection()\n\t\t\t\tconnection = null\n\t\t\t}\n\t\t}\n\t\t\n\t}\n})()\n"],"file":"ConnectionFactory.js"}