{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["IDB_VERSAO","IDB_NOME","OBJECT_STORES","ConnectionFactory","Promise","resolve","reject","openDBRequest","window","indexedDB","open","onupgradeneeded","configurarEstruturaDoBanco","onsuccess","e","connection","novaConexao","onerror","console","log","target","error","IDBDatabase","result","forEach","objectStore","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection","close","bind","Error"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AAIMA,MAAAA,U,GAAa,C;AACnB;;;;;AAIMC,MAAAA,Q,GAAW,e;AACjB;;;;;AAIMC,MAAAA,a,GAAgB,CAAC,aAAD,C;;mCAGTC,iB;;;;;;;;AAEZ;;;;;;0CAMuB;AAEtB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,kBAAIC,aAAa,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsBT,QAAtB,EAAgCD,UAAhC,CAApB;AAEAO,cAAAA,aAAa,CAACI,eAAd,GAAgCC,0BAAhC;;AACAL,cAAAA,aAAa,CAACM,SAAd,GAA0B,UAAAC,CAAC;AAAA,uBAAIT,OAAO,CAACU,UAAU,GAAGA,UAAH,GAAgBC,WAAW,CAACF,CAAD,CAAtC,CAAX;AAAA,eAA3B;;AACAP,cAAAA,aAAa,CAACU,OAAd,GAAwB,UAAAH,CAAC,EAAI;AAC5BI,gBAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACM,MAAF,CAASC,KAArB;AACAf,gBAAAA,MAAM,CAAC,iDAAD,CAAN;AACA,eAHD;AAIA,aATM,CAAP;AAWA;;;;;;;;;;AASA,qBAASM,0BAAT,CAAoCE,CAApC,EAAuC;AACtC,kBAAIQ,WAAW,GAAGR,CAAC,CAACM,MAAF,CAASG,MAA3B;AAEArB,cAAAA,aAAa,CAACsB,OAAd,CAAsB,UAAAC,WAAW,EAAI;AACpC,oBAAIH,WAAW,CAACI,gBAAZ,CAA6BC,QAA7B,CAAsCF,WAAtC,CAAJ,EAAwD;AACvDH,kBAAAA,WAAW,CAACM,iBAAZ,CAA8BH,WAA9B;AACA;;AACDH,gBAAAA,WAAW,CAACO,iBAAZ,CAA8BJ,WAA9B,EAA2C;AAACK,kBAAAA,aAAa,EAAE;AAAhB,iBAA3C;AACA,eALD;AAMA;AAED;;;;;;;;;AAOA,qBAASd,WAAT,CAAqBF,CAArB,EAAwB;AACvBC,cAAAA,UAAU,GAAGD,CAAC,CAACM,MAAF,CAASG,MAAtB;AACAQ,cAAAA,eAAe,GAAGhB,UAAU,CAACiB,KAAX,CAAiBC,IAAjB,CAAsBlB,UAAtB,CAAlB;;AACAA,cAAAA,UAAU,CAACiB,KAAX,GAAmB,YAAY;AAC9B,sBAAM,IAAIE,KAAJ,CAAU,6DAAV,CAAN;AACA,eAFD;;AAGA,qBAAOnB,UAAP;AACA;AAED;AAED;;;;;;;;6CAK0B;AACzB,gBAAIA,UAAJ,EAAgB;AACfgB,cAAAA,eAAe;AACfhB,cAAAA,UAAU,GAAG,IAAb;AACA;AACD","sourcesContent":["/**\n * Versão do banco de dados\n * @type {number}\n */\nconst IDB_VERSAO = 1\n/**\n * Nome do banco de dados\n * @type {string}\n */\nconst IDB_NOME = 'NegociacoesDb'\n/**\n * Object Stores (tabelas não relacionais) do banco de dados\n * @type {string[]}\n */\nconst OBJECT_STORES = ['negociacoes']\nlet connection, closeConnection\n\nexport class ConnectionFactory {\n\t\n\t/**\n\t * Abre uma nova conexão com o IndexedDB,\n\t * ou retorna uma já existente\n\t *\n\t * @returns {Promise}\n\t */\n\tstatic getConnection() {\n\t\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet openDBRequest = window.indexedDB.open(IDB_NOME, IDB_VERSAO)\n\t\t\t\n\t\t\topenDBRequest.onupgradeneeded = configurarEstruturaDoBanco\n\t\t\topenDBRequest.onsuccess = e => resolve(connection ? connection : novaConexao(e))\n\t\t\topenDBRequest.onerror = e => {\n\t\t\t\tconsole.log(e.target.error)\n\t\t\t\treject('Não foi possível se conectar ao banco de dados.')\n\t\t\t}\n\t\t})\n\t\t\n\t\t/**\n\t\t * TODO: backup do banco antes de realizar a atualização\n\t\t * 1) fazer backup dos dados da Obj Storage em uma clone\n\t\t * 2) Recriar a Obj Storage original\n\t\t * 3) Tentar popular a nova Obj Storage com os dados antigos\n\t\t * 4) Deletar a Obj Storage de backup em caso de sucesso\n\t\t * 5) Informar a falha em caso de erro e manter o backup\n\t\t * *) Usar o envento IDBDatabase.onversionchange\n\t\t */\n\t\tfunction configurarEstruturaDoBanco(e) {\n\t\t\tlet IDBDatabase = e.target.result\n\t\t\t\n\t\t\tOBJECT_STORES.forEach(objectStore => {\n\t\t\t\tif (IDBDatabase.objectStoreNames.contains(objectStore)) {\n\t\t\t\t\tIDBDatabase.deleteObjectStore(objectStore)\n\t\t\t\t}\n\t\t\t\tIDBDatabase.createObjectStore(objectStore, {autoIncrement: true})\n\t\t\t})\n\t\t}\n\t\t\n\t\t/**\n\t\t * Para uso interno do método\n\t\t * Abre uma nova conexão com o IndexedDB\n\t\t *\n\t\t * @param e\n\t\t * @returns {IDBDatabase}\n\t\t */\n\t\tfunction novaConexao(e) {\n\t\t\tconnection = e.target.result\n\t\t\tcloseConnection = connection.close.bind(connection)\n\t\t\tconnection.close = function () {\n\t\t\t\tthrow new Error('A conexão é compartilhada e, portanto, não deve ser fechada')\n\t\t\t}\n\t\t\treturn connection\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Método privado que sobrepõe o método IDBDatabase.close\n\t *\n\t * @private\n\t */\n\tstatic _closeConnection() {\n\t\tif (connection) {\n\t\t\tcloseConnection()\n\t\t\tconnection = null\n\t\t}\n\t}\n\t\n}\n\n"],"file":"ConnectionFactory.js"}