{"version":3,"sources":["../../app-es6/controller/NegociacaoController.js"],"names":["NegociacaoController","negociacaoListModel","Proxy","NegociacaoList","NegociacaoListHandler","mensagemModel","Mensagem","MensagemHandler","_negociacaoAjax","NegociacaoAjax","ConnectionFactory","getConnection","then","conexao","_negociacaoDAO","NegociacaoDAO","erro","Object","freeze","_init","importarTodasNegociacoesAjax","listarNegociacoes","setInterval","listarTodos","negociacaoList","negociacoes","negociacao","adicionar","evento","preventDefault","apagarTodos","esvaziar","aviso","_criarNegociacao","salvar","e","sucesso","_limparFormulario","campo","ordenarLista","JSON","stringify","enviarDados","resposta","info","periodo","importarNegociacoes","_informarInicioImportacaoAjax","_preencherListaComNegociacoesImportadas","Promise","all","negociacoesFlat","reduce","concat","map","Negociacao","data","Date","quantidade","valor","filter","some","negociacaoExistente","equals","forEach","objetoLiteral","objeto","DateHelper","textoParaData","CD","inputData","value","parseInt","inputQuantidade","parseFloat","inputValor","formNegociacoes","reset","focus"],"mappings":"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","sourcesContent":["/**\n * Classe NegociacaoController\n * Responsável por intermediar operações envolvendo\n * a tela de negociações e a classe Negociacao\n */\nclass NegociacaoController {\n\t\n\t/**\n\t * Inicaliza o controlador de negociações\n\t */\n\tconstructor() {\n\t\tthis.negociacaoListModel = new Proxy(new NegociacaoList(), new NegociacaoListHandler())\n\t\tthis.mensagemModel = new Proxy(new Mensagem(), new MensagemHandler())\n\t\tthis._negociacaoAjax = new NegociacaoAjax()\n\t\tConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(conexao => this._negociacaoDAO = new NegociacaoDAO(conexao))\n\t\t\t.catch(erro => this.mensagemModel.erro(erro))\n\t\t\t.finally(() => Object.freeze(this))\n\t\t\t.finally(() => this._init())\n\t}\n\t\n\t/**\n\t * Define algumas instruções que devem ser realizadas após a construção do controlador\n\t * @private\n\t */\n\t_init() {\n\t\tthis.importarTodasNegociacoesAjax()\n\t\tthis.listarNegociacoes()\n\t\tsetInterval(() => this.importarTodasNegociacoesAjax(), 10000)\n\t}\n\t\n\t/**\n\t * Utiliza o NegociacaoDAO para buscar do banco de dados\n\t * todas as negociações cadastradas\n\t * Retorna o resultado na tela utilizando as classes\n\t * MensagemView e NegociacoesView\n\t *\n\t */\n\tlistarNegociacoes() {\n\t\tthis._negociacaoDAO\n\t\t    .listarTodos()\n\t\t    .then(negociacaoList => {\n\t\t\t    for (let negociacao of negociacaoList.negociacoes) {\n\t\t\t\t    this.negociacaoListModel.adicionar(negociacao)\n\t\t\t    }\n\t\t    })\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Utiliza o NegociacaoDAO para limpar todas as negociações\n\t * salvas no banco de dados\n\t * @param evento\n\t */\n\tapagarLista(evento) {\n\t\tevento.preventDefault()\n\t\tthis._negociacaoDAO\n\t\t    .apagarTodos()\n\t\t    .then(() => this.negociacaoListModel.esvaziar())\n\t\t    .then(() => this.mensagemModel.aviso(\"Lista esvaziada com sucesso!\"))\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Utiliza o NegociacaoDAO para cadastrar no banco de dados\n\t * uma instância de Negociacao criada a partir dos dados\n\t * do formulário\n\t * Retorna o resultado na tela utilizando as classes\n\t * MensagemView e NegociacoesView\n\t *\n\t * @param evento\n\t */\n\tadicionar(evento) {\n\t\tevento.preventDefault()\n\t\tlet negociacao = NegociacaoController._criarNegociacao()\n\t\tthis._negociacaoDAO\n\t\t    .salvar(negociacao)\n\t\t    .then(e => {\n\t\t\t    this.negociacaoListModel.adicionar(negociacao)\n\t\t\t    this.mensagemModel.sucesso(\"Negociação cadastrada com sucesso!\")\n\t\t\t    NegociacaoController._limparFormulario()\n\t\t    })\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Chama o método de orgenação de negociações\n\t * da classe NegociacaoList\n\t *\n\t * @param {string} campo\n\t */\n\tordenarLista(campo) {\n\t\tthis.negociacaoListModel.ordenarLista(campo)\n\t}\n\t\n\t/**\n\t * Método utilizado pela classe para criar uma nova instância\n\t * de Negociacao a partir dos dados preenchidos no formulário\n\t *\n\t * @param {boolean} objetoLiteral\n\t * @returns {Object | Negociacao}\n\t * @private\n\t */\n\tstatic _criarNegociacao(objetoLiteral = false) {\n\t\tlet objeto = {\n\t\t\tdata      : DateHelper.textoParaData(CD.inputData.value),\n\t\t\tquantidade: parseInt(CD.inputQuantidade.value),\n\t\t\tvalor     : parseFloat(CD.inputValor.value),\n\t\t}\n\t\treturn objetoLiteral ? objeto : new Negociacao(objeto)\n\t}\n\t\n\t/**\n\t * Método utilizado pela classe para limpar o formulário\n\t * de cadastro de negociações\n\t *\n\t * @private\n\t */\n\tstatic _limparFormulario() {\n\t\tCD.formNegociacoes.reset()\n\t\tCD.inputData.focus()\n\t}\n\t\n\t// Operações via AJAX\n\t\n\t/**\n\t * Utiliza a classe NegociacaoAjax para enviar para o server\n\t * uma instância de Negociacao criada a partir do formulário\n\t * @param evento\n\t */\n\tenviarNegociacaoAjax(evento) {\n\t\tevento.preventDefault()\n\t\tlet negociacao = JSON.stringify(NegociacaoController._criarNegociacao(true))\n\t\tthis._negociacaoAjax.enviarDados(negociacao,\n\t\t\t(erro, resposta) => {\n\t\t\t\tif (erro) {\n\t\t\t\t\tthis.mensagemModel.erro(erro)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis.mensagemModel.sucesso('Negociação enviada com sucesso!')\n\t\t\t}, () => this.mensagemModel.info('Enviando negociação...'),\n\t\t)\n\t}\n\t\n\t/**\n\t * Importa do servidor todas as negociações que estejam\n\t * no período enviado por parâmetro (semana|passada|retrasada)\n\t * e apresenta o resultado na tela utilizando as classes\n\t * MensagemView e NegociacoesView\n\t *\n\t * Irá ignorar negociações já importadas\n\t *\n\t * @param periodo\n\t */\n\timportarNegociacoesAjax(periodo = 'semana') {\n\t\tthis._negociacaoAjax.importarNegociacoes(periodo, () => this._informarInicioImportacaoAjax())\n\t\t    .then(negociacoes => this._preencherListaComNegociacoesImportadas(negociacoes))\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Utiliza o Promise.all para enviar três requisições\n\t * em sequência para o servidor, listando as negociações\n\t * dos períodos 'semana [atual|passada|retrasada]'\n\t */\n\timportarTodasNegociacoesAjax() {\n\t\tPromise.all([\n\t\t\tthis._negociacaoAjax.importarNegociacoes('semana', () => this._informarInicioImportacaoAjax()),\n\t\t\tthis._negociacaoAjax.importarNegociacoes('anterior'),\n\t\t\tthis._negociacaoAjax.importarNegociacoes('retrasada'),\n\t\t]).then(negociacoes => {\n\t\t\tlet negociacoesFlat = negociacoes.reduce(\n\t\t\t\t(negociacoesFlat, negociacoes) => negociacoesFlat.concat(negociacoes), [],\n\t\t\t)\n\t\t\tthis._preencherListaComNegociacoesImportadas(negociacoesFlat)\n\t\t}).catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Preenche a classe NegociacoesList com uma lista de instâncias de Negociacao,\n\t * exibindo os novos dados e a mensagem do resultado na tela\n\t *\n\t * @param {array<Negociacao>} negociacoes\n\t * @private\n\t */\n\t_preencherListaComNegociacoesImportadas(negociacoes) {\n\t\tnegociacoes\n\t\t\t.map(negociacao =>\n\t\t\t\tnew Negociacao({\n\t\t\t\t\tdata      : new Date(negociacao.data),\n\t\t\t\t\tquantidade: negociacao.quantidade,\n\t\t\t\t\tvalor     : negociacao.valor,\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.filter(negociacao =>\n\t\t\t\t!this.negociacaoListModel.negociacoes.some(negociacaoExistente =>\n\t\t\t\t\tnegociacao.equals(negociacaoExistente),\n\t\t\t\t),\n\t\t\t)\n\t\t\t.forEach(negociacao => this.negociacaoListModel.adicionar(negociacao))\n\t\t\n\t\tthis.mensagemModel.info(\"Negociações importadas com sucesso! <small>Negocições repetidas foram ignoradas</small>\")\n\t}\n\t\n\t/**\n\t * Exibe na tela a mensagem de que as negociações estão sendo importadas\n\t * @private\n\t */\n\t_informarInicioImportacaoAjax() {\n\t\tthis.mensagemModel.info('Importanto negociações...')\n\t}\n}\n"],"file":"NegociacaoController.js"}