{"version":3,"sources":["../../app-es6/controller/NegociacaoController.js"],"names":["instanciaAtual","negociacaoController","CD","ConnectionFactory","Negociacao","NegociacaoDAO","NegociacaoAjax","NegociacaoList","NegociacaoListHandler","Mensagem","MensagemHandler","DateHelper","NegociacaoController","negociacaoListModel","Proxy","mensagemModel","_negociacaoAjax","getConnection","then","conexao","_negociacaoDAO","erro","Object","freeze","_init","importarTodasNegociacoesAjax","listarNegociacoes","setInterval","listarTodos","negociacaoList","negociacoes","negociacao","adicionar","evento","preventDefault","apagarTodos","esvaziar","aviso","_criarNegociacao","salvar","e","sucesso","_limparFormulario","campo","ordenarLista","JSON","stringify","enviarDados","resposta","info","periodo","importarNegociacoes","_informarInicioImportacaoAjax","_preencherListaComNegociacoesImportadas","Promise","all","negociacoesFlat","reduce","concat","map","data","Date","quantidade","valor","filter","some","negociacaoExistente","equals","forEach","objetoLiteral","objeto","textoParaData","inputData","value","parseInt","inputQuantidade","parseFloat","inputValor","formNegociacoes","reset","focus"],"mappings":"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","sourcesContent":["import {CD}                    from \"../helpers/Container/CD.js\"\nimport {ConnectionFactory}     from \"../services/ConnectionFactory.js\"\nimport {Negociacao}            from \"../model/Negociacao/Negociacao.js\"\nimport {NegociacaoDAO}         from \"../model/Negociacao/NegociacaoDAO.js\"\nimport {NegociacaoAjax}        from \"../services/Ajax/NegociacaoAjax.js\"\nimport {NegociacaoList}        from \"../model/Negociacao/NegociacaoList.js\"\nimport {NegociacaoListHandler} from \"../services/Handler/NegociacaoListHandler.js\"\nimport {Mensagem}              from \"../model/Mensagem/Mensagem.js\"\nimport {MensagemHandler}       from \"../services/Handler/MensagemHandler.js\"\nimport {DateHelper}            from \"../helpers/DateHelper.js\"\n\n/**\n * Classe NegociacaoController\n * Responsável por intermediar operações envolvendo\n * a tela de negociações e a classe Negociacao\n */\nclass NegociacaoController {\n\t\n\t/**\n\t * Inicaliza o controlador de negociações\n\t */\n\tconstructor() {\n\t\tthis.negociacaoListModel = new Proxy(new NegociacaoList(), new NegociacaoListHandler())\n\t\tthis.mensagemModel = new Proxy(new Mensagem(), new MensagemHandler())\n\t\tthis._negociacaoAjax = new NegociacaoAjax()\n\t\tConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(conexao => this._negociacaoDAO = new NegociacaoDAO(conexao))\n\t\t\t.catch(erro => this.mensagemModel.erro(erro))\n\t\t\t.finally(() => Object.freeze(this))\n\t\t\t.finally(() => this._init())\n\t}\n\t\n\t/**\n\t * Define algumas instruções que devem ser realizadas após a construção do controlador\n\t * @private\n\t */\n\t_init() {\n\t\tthis.importarTodasNegociacoesAjax()\n\t\tthis.listarNegociacoes()\n\t\tsetInterval(() => this.importarTodasNegociacoesAjax(), 10000)\n\t}\n\t\n\t/**\n\t * Utiliza o NegociacaoDAO para buscar do banco de dados\n\t * todas as negociações cadastradas\n\t * Retorna o resultado na tela utilizando as classes\n\t * MensagemView e NegociacoesView\n\t *\n\t */\n\tlistarNegociacoes() {\n\t\tthis._negociacaoDAO\n\t\t    .listarTodos()\n\t\t    .then(negociacaoList => {\n\t\t\t    for (let negociacao of negociacaoList.negociacoes) {\n\t\t\t\t    this.negociacaoListModel.adicionar(negociacao)\n\t\t\t    }\n\t\t    })\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Utiliza o NegociacaoDAO para limpar todas as negociações\n\t * salvas no banco de dados\n\t * @param evento\n\t */\n\tapagarLista(evento) {\n\t\tevento.preventDefault()\n\t\tthis._negociacaoDAO\n\t\t    .apagarTodos()\n\t\t    .then(() => this.negociacaoListModel.esvaziar())\n\t\t    .then(() => this.mensagemModel.aviso(\"Lista esvaziada com sucesso!\"))\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Utiliza o NegociacaoDAO para cadastrar no banco de dados\n\t * uma instância de Negociacao criada a partir dos dados\n\t * do formulário\n\t * Retorna o resultado na tela utilizando as classes\n\t * MensagemView e NegociacoesView\n\t *\n\t * @param evento\n\t */\n\tadicionar(evento) {\n\t\tevento.preventDefault()\n\t\tlet negociacao = NegociacaoController._criarNegociacao()\n\t\tthis._negociacaoDAO\n\t\t    .salvar(negociacao)\n\t\t    .then(e => {\n\t\t\t    this.negociacaoListModel.adicionar(negociacao)\n\t\t\t    this.mensagemModel.sucesso(\"Negociação cadastrada com sucesso!\")\n\t\t\t    NegociacaoController._limparFormulario()\n\t\t    })\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Chama o método de orgenação de negociações\n\t * da classe NegociacaoList\n\t *\n\t * @param {string} campo\n\t */\n\tordenarLista(campo) {\n\t\tthis.negociacaoListModel.ordenarLista(campo)\n\t}\n\t\n\t/**\n\t * Método utilizado pela classe para criar uma nova instância\n\t * de Negociacao a partir dos dados preenchidos no formulário\n\t *\n\t * @param {boolean} objetoLiteral\n\t * @returns {Object | Negociacao}\n\t * @private\n\t */\n\tstatic _criarNegociacao(objetoLiteral = false) {\n\t\tlet objeto = {\n\t\t\tdata      : DateHelper.textoParaData(CD.inputData.value),\n\t\t\tquantidade: parseInt(CD.inputQuantidade.value),\n\t\t\tvalor     : parseFloat(CD.inputValor.value),\n\t\t}\n\t\treturn objetoLiteral ? objeto : new Negociacao(objeto)\n\t}\n\t\n\t/**\n\t * Método utilizado pela classe para limpar o formulário\n\t * de cadastro de negociações\n\t *\n\t * @private\n\t */\n\tstatic _limparFormulario() {\n\t\tCD.formNegociacoes.reset()\n\t\tCD.inputData.focus()\n\t}\n\t\n\t// Operações via AJAX\n\t\n\t/**\n\t * Utiliza a classe NegociacaoAjax para enviar para o server\n\t * uma instância de Negociacao criada a partir do formulário\n\t * @param evento\n\t */\n\tenviarNegociacaoAjax(evento) {\n\t\tevento.preventDefault()\n\t\tlet negociacao = JSON.stringify(NegociacaoController._criarNegociacao(true))\n\t\tthis._negociacaoAjax.enviarDados(negociacao,\n\t\t\t(erro, resposta) => {\n\t\t\t\tif (erro) {\n\t\t\t\t\tthis.mensagemModel.erro(erro)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis.mensagemModel.sucesso('Negociação enviada com sucesso!')\n\t\t\t}, () => this.mensagemModel.info('Enviando negociação...'),\n\t\t)\n\t}\n\t\n\t/**\n\t * Importa do servidor todas as negociações que estejam\n\t * no período enviado por parâmetro (semana|passada|retrasada)\n\t * e apresenta o resultado na tela utilizando as classes\n\t * MensagemView e NegociacoesView\n\t *\n\t * Irá ignorar negociações já importadas\n\t *\n\t * @param periodo\n\t */\n\timportarNegociacoesAjax(periodo = 'semana') {\n\t\tthis._negociacaoAjax.importarNegociacoes(periodo, () => this._informarInicioImportacaoAjax())\n\t\t    .then(negociacoes => this._preencherListaComNegociacoesImportadas(negociacoes))\n\t\t    .catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Utiliza o Promise.all para enviar três requisições\n\t * em sequência para o servidor, listando as negociações\n\t * dos períodos 'semana [atual|passada|retrasada]'\n\t */\n\timportarTodasNegociacoesAjax() {\n\t\tPromise.all([\n\t\t\tthis._negociacaoAjax.importarNegociacoes('semana', () => this._informarInicioImportacaoAjax()),\n\t\t\tthis._negociacaoAjax.importarNegociacoes('anterior'),\n\t\t\tthis._negociacaoAjax.importarNegociacoes('retrasada'),\n\t\t]).then(negociacoes => {\n\t\t\tlet negociacoesFlat = negociacoes.reduce(\n\t\t\t\t(negociacoesFlat, negociacoes) => negociacoesFlat.concat(negociacoes), [],\n\t\t\t)\n\t\t\tthis._preencherListaComNegociacoesImportadas(negociacoesFlat)\n\t\t}).catch(erro => this.mensagemModel.erro(erro))\n\t}\n\t\n\t/**\n\t * Preenche a classe NegociacoesList com uma lista de instâncias de Negociacao,\n\t * exibindo os novos dados e a mensagem do resultado na tela\n\t *\n\t * @param {array<Negociacao>} negociacoes\n\t * @private\n\t */\n\t_preencherListaComNegociacoesImportadas(negociacoes) {\n\t\tnegociacoes\n\t\t\t.map(negociacao =>\n\t\t\t\tnew Negociacao({\n\t\t\t\t\tdata      : new Date(negociacao.data),\n\t\t\t\t\tquantidade: negociacao.quantidade,\n\t\t\t\t\tvalor     : negociacao.valor,\n\t\t\t\t}),\n\t\t\t)\n\t\t\t.filter(negociacao =>\n\t\t\t\t!this.negociacaoListModel.negociacoes.some(negociacaoExistente =>\n\t\t\t\t\tnegociacao.equals(negociacaoExistente),\n\t\t\t\t),\n\t\t\t)\n\t\t\t.forEach(negociacao => this.negociacaoListModel.adicionar(negociacao))\n\t\t\n\t\tthis.mensagemModel.info(\"Negociações importadas com sucesso! <small>Negocições repetidas foram ignoradas</small>\")\n\t}\n\t\n\t/**\n\t * Exibe na tela a mensagem de que as negociações estão sendo importadas\n\t * @private\n\t */\n\t_informarInicioImportacaoAjax() {\n\t\tthis.mensagemModel.info('Importanto negociações...')\n\t}\n}\n\nlet negociacaoController = new NegociacaoController()\nexport function instanciaAtual() {\n\treturn negociacaoController\n}"],"file":"NegociacaoController.js"}